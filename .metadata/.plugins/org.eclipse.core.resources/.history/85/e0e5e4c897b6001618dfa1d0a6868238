package j.exec;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccSupi {

	public static final int line = 173;
	public static final int testCase = 1606;
	public static final int failTestCase[] = {30,165,212,298,553,559,591,811,827,1183,
			1185,1194,1195,1196,1197,1198,1200,1201,1202,1205,1207,1208,1209,1210,
			1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1238,
			1239,1241,1242,1243,1244,1258,1261,1262,1263,1297,1298,1299,1304,1305,
			1307,1308,1309,1332,1335,1336,1337,1460,1461,1476,1503,1560,1561,1562,
			1563,1565,1566};
	
	public void accNum(String name,int [] failNum,int []succNum){
		String encoding="GBK";
		for(int i = 1;i <= testCase;i++)
		{
			int j = 0;
			String fileName =name + i+"Path";
			try {
				File pathf = new File(fileName);
				if(pathf.isFile() && pathf.exists()){
					InputStreamReader read = new InputStreamReader(
			                new FileInputStream(pathf),encoding);
			        BufferedReader bufferedReader = new BufferedReader(read);
			        String lineTxt = null;
			        boolean end = true;
			        int num;
			        if(i == failTestCase[j] && end)
		        	{
			        	if(j != failTestCase.length-1)
			        		j++;
			        	else
			        		end = false;
			        	while((lineTxt = bufferedReader.readLine())!= null)
			        	{
			        		num = Integer.parseInt(lineTxt);
			        		failNum[num] ++;
			        	}
			        }
			        else
			        {
			        	while((lineTxt = bufferedReader.readLine())!= null)
			        	{
			        		num = Integer.parseInt(lineTxt);
			        		succNum[num] ++;
			        	}
			        }
			        read.close();
			        bufferedReader.close();
				}
				
				else{
					System.out.println("No file"+fileName);
				}
				 
			}catch (Exception e) {
				 System.out.println("error");
				 e.printStackTrace();
			}
		}
		 
	}
	
	public void accResult(int [] failNum,int []succNum,double [] result)
	{
		int totalPass = testCase - failTestCase.length;
		int totalFail = failTestCase.length;
        double num1,num2;
        System.out.println("totP,totF: "+totalFail+" "+totalPass);
		for(int i = 0;i <line;i++)
		{
			if(failNum[i] == 0 && succNum[i] == 0)
				result[i] = -1;
			else{
                num1 = failNum[i]*1.0/totalFail*1.0;
                num2 = succNum[i]*1.0/totalPass*1.0;
                //System.out.println("num1 ,num2 :"+num1+" "+ num2);
				result[i] = num1/(num1 + num2);
			}
		System.out.println(i+": "+result[i]);
		}
		
	}
	
	public void Rank(double [] result,int num) throws IOException
	{
		Map<Integer,Double> store = new HashMap<>();
		for(int i = 0;i < result.length;i++)
			store.put(i+1, result[i]);
		List<Map.Entry<Integer,Double>> infoIds =
			    new ArrayList<Map.Entry<Integer,Double>>(store.entrySet());
		Collections.sort(infoIds, new Comparator<Map.Entry<Integer, Double>>() {   
		    public int compare(Map.Entry<Integer, Double> o1, Map.Entry<Integer, Double> o2) {      
		        //return (o2.getValue() - o1.getValue()); 
		        return (o1.getValue().compareTo(o2.getValue()));
		    }
		}); 
		int i;
		for( i = 0;i < num;i++){
			System.out.println(infoIds.get(i).getKey()+" : "+ infoIds.get(i).getValue());
		}
		String writeName = "Top"+String.valueOf(num)+"Supic";
        FileWriter fw = new FileWriter("./result"+writeName);
		while(infoIds.get(i-1).getValue() - infoIds.get(i).getValue()< 0.0000000001)
		{
			System.out.println(infoIds.get(i).getKey()+" : "+ infoIds.get(i).getValue());
			fw.write(infoIds.get(i).getKey()+" : "+ infoIds.get(i).getValue()+"\n");
			i++;
		}
		fw.close();
	}
	
	
	public static void main(String []args)
	{
		int succNum [] = new int[line];
		int failNum [] = new int[line];
		double result[] = new double[line];
		AccSupi as = new AccSupi();
		as.accNum("tcas_Tc", failNum, succNum);
		as.accResult(failNum, succNum, result);
		//as.Rank(result, 10);
				
	}
}
